{
	"name": "azde_project_happiness_life_around_world",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "azde_project_life_expectancy_data",
						"type": "DatasetReference"
					},
					"name": "LifeExpectancy"
				},
				{
					"dataset": {
						"referenceName": "azde_project_world_population_data",
						"type": "DatasetReference"
					},
					"name": "WorldPopulation"
				},
				{
					"dataset": {
						"referenceName": "azde_project_world_happiness_report",
						"type": "DatasetReference"
					},
					"name": "HappinessReport"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "azde_project_dataflow_sink_data",
						"type": "DatasetReference"
					},
					"name": "SinkData"
				}
			],
			"transformations": [
				{
					"name": "SelectLifeExpectancy"
				},
				{
					"name": "SelectWorldPopulation"
				},
				{
					"name": "SelectHapinessReport"
				},
				{
					"name": "JoinLifeExpectancyWorldPopulation"
				},
				{
					"name": "JoinAllSelect"
				},
				{
					"name": "SelectFromJoin"
				},
				{
					"name": "AggregateDistinctCountry"
				},
				{
					"name": "FilterHapinessAndLifeExpect"
				},
				{
					"name": "SortbyRank"
				}
			],
			"scriptLines": [
				"source(output(",
				"          Country as string,",
				"          Year as string,",
				"          Status as string,",
				"          {Life expectancy } as integer,",
				"          {Adult Mortality} as string,",
				"          {infant deaths} as string,",
				"          Alcohol as string,",
				"          {percentage expenditure} as string,",
				"          {Hepatitis B} as string,",
				"          {Measles } as string,",
				"          { BMI } as string,",
				"          {under-five deaths } as string,",
				"          Polio as string,",
				"          {Total expenditure} as string,",
				"          {Diphtheria } as string,",
				"          { HIV/AIDS} as string,",
				"          GDP as integer,",
				"          Population as string,",
				"          { thinness  1-19 years} as string,",
				"          { thinness 5-9 years} as string,",
				"          {Income composition of resources} as integer,",
				"          Schooling as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: true,",
				"     inferDriftedColumnTypes: true,",
				"     ignoreNoFilesFound: false) ~> LifeExpectancy",
				"source(output(",
				"          Rank as string,",
				"          CCA3 as string,",
				"          {Country/Territory} as string,",
				"          Capital as string,",
				"          Continent as string,",
				"          {2022 Population} as string,",
				"          {2020 Population} as string,",
				"          {2015 Population} as string,",
				"          {2010 Population} as string,",
				"          {2000 Population} as string,",
				"          {1990 Population} as string,",
				"          {1980 Population} as string,",
				"          {1970 Population} as string,",
				"          {Area (km²)} as integer,",
				"          {Density (per km²)} as integer,",
				"          {Growth Rate} as integer,",
				"          {World Population Percentage} as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: true,",
				"     inferDriftedColumnTypes: true,",
				"     ignoreNoFilesFound: false) ~> WorldPopulation",
				"source(output(",
				"          Country as string,",
				"          Region as string,",
				"          {Happiness Rank} as integer,",
				"          {Happiness Score} as integer,",
				"          {Standard Error} as string,",
				"          {Economy (GDP per Capita)} as integer,",
				"          Family as string,",
				"          {Health (Life Expectancy)} as integer,",
				"          Freedom as string,",
				"          {Trust (Government Corruption)} as string,",
				"          Generosity as string,",
				"          {Dystopia Residual} as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> HappinessReport",
				"LifeExpectancy select(mapColumn(",
				"          Country,",
				"          {Life expectancy },",
				"          {Income composition of resources},",
				"          Schooling",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectLifeExpectancy",
				"WorldPopulation select(mapColumn(",
				"          Country = {Country/Territory},",
				"          Continent,",
				"          {Area (km²)},",
				"          {Density (per km²)},",
				"          {Growth Rate},",
				"          {World Population Percentage}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectWorldPopulation",
				"HappinessReport select(mapColumn(",
				"          Country,",
				"          {Happiness Rank},",
				"          {Happiness Score},",
				"          {Economy (GDP per Capita)}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectHapinessReport",
				"SelectWorldPopulation, SelectLifeExpectancy join(SelectWorldPopulation@Country == SelectLifeExpectancy@Country,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> JoinLifeExpectancyWorldPopulation",
				"JoinLifeExpectancyWorldPopulation, SelectHapinessReport join(SelectWorldPopulation@Country == SelectHapinessReport@Country,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> JoinAllSelect",
				"JoinAllSelect select(mapColumn(",
				"          Country = SelectWorldPopulation@Country,",
				"          Continent,",
				"          Area = {Area (km²)},",
				"          Density = {Density (per km²)},",
				"          GrowthRate = {Growth Rate},",
				"          PopulationPercentage = {World Population Percentage},",
				"          Lifeexpectancy = {Life expectancy },",
				"          IncomeComposition = {Income composition of resources},",
				"          Schooling,",
				"          HappinessRank = {Happiness Rank},",
				"          HappinessScore = {Happiness Score},",
				"          GDPperCapita = {Economy (GDP per Capita)}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectFromJoin",
				"SelectFromJoin aggregate(groupBy(Country),",
				"     Continent = first(Continent),",
				"          Area = avg(Area),",
				"          Density = avg(Density),",
				"          GrowthRate = avg(GrowthRate),",
				"          PopulationPercentage = avg(PopulationPercentage),",
				"          Lifeexpectancy = avg(Lifeexpectancy),",
				"          IncomeComposition = avg(IncomeComposition),",
				"          Schooling = avg(Schooling),",
				"          HappinessRank = avg(HappinessRank),",
				"          HappinessScore = avg(HappinessScore),",
				"          GDPperCapita = avg(GDPperCapita)) ~> AggregateDistinctCountry",
				"AggregateDistinctCountry filter(HappinessScore > 5 && Lifeexpectancy> 75) ~> FilterHapinessAndLifeExpect",
				"FilterHapinessAndLifeExpect sort(asc(HappinessRank, true)) ~> SortbyRank",
				"SortbyRank sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SinkData"
			]
		}
	}
}